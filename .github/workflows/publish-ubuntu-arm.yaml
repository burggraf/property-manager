name: "publish-ubuntu-arm"

on:
  push:
    branches:
      - release

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "ubuntu-22.04"
            args: "--target aarch64-unknown-linux-gnu"
          #- platform: "macos-latest" # for Arm based macs (M1 and above).
          #  args: "--target aarch64-apple-darwin"
          #- platform: "macos-latest" # for Intel based macs.
          #  args: "--target x86_64-apple-darwin"
          #- platform: "windows-latest"
          #  args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu

      - name: Install cross-compilation dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          # Add ARM64 architecture
          sudo dpkg --add-architecture arm64

          # Create new sources list for both architectures
          sudo tee /etc/apt/sources.list << EOF
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-updates main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ jammy-backports main restricted universe multiverse
          deb [arch=amd64] http://security.ubuntu.com/ubuntu jammy-security main restricted universe multiverse

          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse
          EOF

          # Clean and update package lists
          sudo rm -rf /var/lib/apt/lists/*
          sudo apt-get clean
          sudo apt-get update

          # Install cross-compilation tools and dependencies
          sudo apt-get install -y \
            crossbuild-essential-arm64 \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            pkg-config \
            libwebkit2gtk-4.0-dev:arm64 \
            libwebkit2gtk-4.1-dev:arm64 \
            libgtk-3-dev:arm64 \
            libsoup-3.0-dev:arm64 \
            libjavascriptcoregtk-4.0-dev:arm64 \
            libappindicator3-dev:arm64 \
            librsvg2-dev:arm64 \
            libglib2.0-dev:arm64 \
            libsoup-3.0-dev:arm64 \
            libgdk-pixbuf2.0-dev:arm64 \
            libatk1.0-dev:arm64 \
            libpango1.0-dev:arm64 \
            libcairo2-dev:arm64

      - name: Set up cross-compilation environment
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          # Create a wrapper script for pkg-config
          sudo tee /usr/local/bin/aarch64-linux-gnu-pkg-config << 'EOF' > /dev/null
          #!/bin/sh
          export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
          export PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig
          export PKG_CONFIG_SYSROOT_DIR=/
          export PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1
          export PKG_CONFIG_ALLOW_SYSTEM_LIBS=1
          exec pkg-config "$@"
          EOF
          sudo chmod +x /usr/local/bin/aarch64-linux-gnu-pkg-config

          # Set environment variables for cross-compilation
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG=/usr/local/bin/aarch64-linux-gnu-pkg-config" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=--sysroot=/usr/aarch64-linux-gnu" >> $GITHUB_ENV

          # Create .cargo/config
          mkdir -p ~/.cargo
          cat > ~/.cargo/config << EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          ar = "aarch64-linux-gnu-ar"
          rustflags = [
            "-C", "link-arg=-fuse-ld=lld",
            "-C", "target-feature=+crt-static",
          ]
          EOF

          # Install lld linker
          sudo apt-get install -y lld

          # Debug information
          echo "Checking installed packages:"
          dpkg -l | grep aarch64
          echo "Checking pkg-config paths:"
          pkg-config --variable pc_path pkg-config

      - name: Set environment variables
        run: |
          echo "package.json contents:"
          cat package.json
          echo "**************"
          echo "setting env variables"
          echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          echo "NAME=$(node -p "require('./package.json').name")" >> $GITHUB_ENV
          echo "IDENTIFIER=$(node -p "require('./package.json').identifier")" >> $GITHUB_ENV
          export VERSION=$(node -p "require('./package.json').version")
          export NAME=$(node -p "require('./package.json').name")
          export IDENTIFIER=$(node -p "require('./package.json').identifier")
          echo "Shell VERSION: $VERSION"
          echo "Shell NAME: $NAME"
          echo "Shell IDENTIFIER: $IDENTIFIER"
      - name: Check environment variables
        run: |
          echo "ENV VERSION: ${{ env.VERSION }}"
          echo "ENV NAME: ${{ env.NAME }}"
          echo "ENV IDENTIFIER: ${{ env.IDENTIFIER }}"
          echo "Computed VERSION: $(node -p "require('./package.json').version")"
          echo "Computed NAME: $(node -p "require('./package.json').name")"

      - name: Create and initialize Tauri project
        run: |
          npm install
          npm run build

          # Create src-tauri directory and subdirectories
          mkdir -p src-tauri/icons
          mkdir -p src-tauri/src

          # Initialize a new Rust project
          cd src-tauri
          cargo init --name svelte5-template
          cd ..

          # Copy icons
          cp static/favicon.png src-tauri/icons/32x32.png
          cp static/favicon.png src-tauri/icons/128x128.png
          cp static/favicon.png src-tauri/icons/128x128@2x.png
          cp static/favicon.png src-tauri/icons/icon.icns
          cp static/favicon.png src-tauri/icons/icon.ico

          # Create Cargo.toml
          cat > src-tauri/Cargo.toml << EOF
          [package]
          name = "svelte5-template"
          version = "${{ env.VERSION }}"
          description = "Svelte 5 Template App"
          authors = ["you"]
          license = ""
          repository = ""
          edition = "2021"
          rust-version = "1.70"

          [build-dependencies]
          tauri-build = { version = "1.5.0", features = [] }

          [dependencies]
          serde_json = "1.0"
          serde = { version = "1.0", features = ["derive"] }
          tauri = { version = "1.5.2", features = ["shell-open"] }

          [features]
          custom-protocol = [ "tauri/custom-protocol" ]
          default = [ "custom-protocol" ]
          EOF

          # Create build.rs
          cat > src-tauri/build.rs << EOF
          fn main() {
            tauri_build::build()
          }
          EOF

          # Create main.rs
          cat > src-tauri/src/main.rs << EOF
          #![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

          fn main() {
              tauri::Builder::default()
                  .run(tauri::generate_context!())
                  .expect("error while running tauri application");
          }
          EOF

          # Create tauri.conf.json with both Linux and macOS targets
          cat > src-tauri/tauri.conf.json << EOF
          {
            "build": {
              "beforeDevCommand": "",
              "beforeBuildCommand": "",
              "devPath": "$(pwd)/build",
              "distDir": "$(pwd)/build"
            },
            "package": {
              "productName": "${{ env.NAME }}",
              "version": "${{ env.VERSION }}"
            },
            "tauri": {
              "bundle": {
                "active": true,
                "category": "DeveloperTool",
                "copyright": "",
                "identifier": "${{ env.IDENTIFIER }}",
                "icon": [
                  "icons/32x32.png",
                  "icons/128x128.png",
                  "icons/128x128@2x.png",
                  "icons/icon.icns",
                  "icons/icon.ico"
                ],
                "resources": [],
                "shortDescription": "",
                "targets": [
                  "dmg",
                  "app",
                  "deb",
                  "appimage",
                  "rpm"
                ],
                "deb": {
                  "depends": []
                },
                "rpm": {
                  "depends": []
                },
                "macOS": {
                  "frameworks": [],
                  "minimumSystemVersion": "",
                  "exceptionDomain": "",
                  "signingIdentity": null,
                  "entitlements": null
                },
                "windows": {
                  "certificateThumbprint": null,
                  "digestAlgorithm": "sha256",
                  "timestampUrl": ""
                }
              },
              "security": {
                "csp": null
              },
              "windows": [
                {
                  "fullscreen": false,
                  "height": 600,
                  "resizable": true,
                  "title": "${{ env.NAME }}",
                  "width": 800
                }
              ]
            }
          }
          EOF

          # Verify the directory structure
          echo "Tauri directory contents:"
          ls -la src-tauri/
          echo "Cargo.toml contents:"
          cat src-tauri/Cargo.toml

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          distPath: ./build
          bundleIdentifier: ${{ env.IDENTIFIER }}
          appName: ${{ env.NAME }}
          appVersion: ${{ env.VERSION }}
